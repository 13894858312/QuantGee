package logic.stock;

import java.util.Arrays;

/**
 * Created by Mark.W on 2017/5/24.
 */
public class BpTest {

    public static void main(String[] args) {
        //初始化神经网络的基本配置
        //第一个参数是一个整型数组，表示神经网络的层数和每层节点数，比如{3,10,10,10,10,2}表示输入层是3个节点，输出层是2个节点，中间有4层隐含层，每层10个节点
        //第二个参数是学习步长，第三个参数是动量系数
        BpNet bp = new BpNet(new int[]{5, 10, 1}, 0.15, 0.8);

        //2017-02-16-2017-03-30
        //设置样本数据，对应上面的4个二维坐标数据
//        double[][] data = new double[][]{{9.45,9.5,9.42,411161.12,0.11},{9.46,9.49,9.37,423774.97,-0.74},
//                {9.4,9.58,9.4,898755.38,1.81},{9.55,9.62,9.54,646584.19,0.1},
//                {9.55,9.57,9.48,335327.81,-0.63}, {9.5, 9.54, 9.48,332500.12,-0.1},
//                {9.5,9.5,9.42,407341.12,-0.74}, {9.43,9.51,9.42, 369719.69,0.53},
//                {9.49,9.55,9.47,346993.72,0.1},  {9.51,9.54,9.42,403628.72,-0.63},
//                {9.41,9.43,9.36,342655.09,-0.32},  {9.4,9.46,9.39,404511.38,0.53},
//                {9.43,9.45,9.4,244438.41,-0.32},{9.41,9.43,9.36,378169.91, -0.42},
//                {9.38,9.41,9.36,390182.25,0.21}, {9.39,9.45,9.37, 545304.44, 0.43},
//                {9.42,9.48,9.42,546560.88,0.42}, {9.48,9.53, 9.45, 635953.81, 0.42},
//                {9.45,9.46,9.3,1583647,-2.21}, {9.29,9.31,9.22, 715021.75, -0.64},
//                {9.25,9.26,9.2,554648.75,-0.11}, {9.2,9.22, 9.14, 566123.62, -0.87},
//                {9.16,9.24,9.15,433588.28,0.44}, {9.2,9.24,9.16, 710827.81, -0.11},
//                {9.12,9.19,9.08,985012.06,-0.54}, {9.16,9.17, 9.1, 481372.75, -0.22},
//                {9.13,9.15,9.09,601140.69,-0.11}, {9.12,9.12, 9.06, 687285.5, -0.33}};
//        {9.46, 9.39, 9.56, 9.57, 9.51, 9.5, 9.43, 9.48, 9.49, 9.43,
//                9.4, 9.45, 9.42, 9.38, 9.4, 9.44, 9.48, 9.52, 9.31, 9.25,
//                9.24, 9.16, 9.2, 9.19, 9.14, 9.12, 9.11, 9.08}, };
        double[][] data = new double[][]{{9.46, 9.39, 9.56, 9.57, 9.51}, {9.39, 9.56, 9.57, 9.51, 9.5},
                {9.56, 9.57, 9.51, 9.5, 9.43}, {9.51, 9.5, 9.43, 9.48, 9.49},
                {9.5, 9.43, 9.48, 9.49, 9.43}, {9.43, 9.48, 9.49, 9.43, 9.4},
                {9.48, 9.49, 9.43, 9.4, 9.45}, {9.49, 9.43,9.4, 9.45, 9.42,},
                {9.43, 9.4, 9.45, 9.42, 9.38}, {9.4, 9.45, 9.42, 9.38, 9.4},
                {9.45, 9.42, 9.38, 9.4, 9.44}, {9.42, 9.38, 9.4, 9.44, 9.48},
                {9.38, 9.4, 9.44, 9.48, 9.52}, {9.4, 9.44, 9.48, 9.52, 9.31},
                {9.44, 9.48, 9.52, 9.31, 9.25}, {9.48, 9.52, 9.31, 9.25, 9.24},
                {9.52, 9.31, 9.25,9.24, 9.16}, {9.31, 9.25, 9.24, 9.16, 9.2},
                {9.25, 9.24, 9.16, 9.2, 9.19}, {9.24, 9.16, 9.2, 9.19, 9.14},
                {9.16, 9.2, 9.19, 9.14, 9.12}, {9.2, 9.19, 9.14, 9.12, 9.11},
                {9.19, 9.14, 9.12, 9.11, 9.08}};


        //设置目标数据，对应4个坐标数据的分类
        double[][] target = new double[][]{ {9.5}, {9.43}, {9.48}, {9.49}, {9.43},
                {9.4}, {9.45}, {9.42}, {9.38}, {9.4}, {9.44}, {9.48}, {9.52}, {9.31}, {9.25},
                {9.24}, {9.16}, {9.2}, {9.19}, {9.14}, {9.12}, {9.11}, { 9.08}};



        bp.train(data, target);


        //根据训练结果来检验样本数据
        for (int j = 0; j < data.length; j++) {
            double[] result = bp.computeOut(data[j]);
            System.out.println(Arrays.toString(data[j]) + "    actual:" + Arrays.toString(result) + "      expected:" + target[j][0]);
        }

        //根据训练结果来预测一条新数据的分类
//        double[] x = new double[]{9.08, 9.18, 9.08, 633121.19, 0.99};
//        double[] result = bp.computeOut(x);
//        System.out.println(Arrays.toString(x) + "   actual:" + Arrays.toString(result) + "      expected: 9.17");

//        //初始化神经网络的基本配置
//        //第一个参数是一个整型数组，表示神经网络的层数和每层节点数，比如{3,10,10,10,10,2}表示输入层是3个节点，输出层是2个节点，中间有4层隐含层，每层10个节点
//        //第二个参数是学习步长，第三个参数是动量系数
//        BpNet bp = new BpNet(new int[]{2,10,2}, 0.15, 0.8);
//
//        //设置样本数据，对应上面的4个二维坐标数据
//        double[][] data = new double[][]{{1,2},{2,2},{1,1},{2,1}};
//        //设置目标数据，对应4个坐标数据的分类
//        double[][] target = new double[][]{{1,0},{0,1},{0,1},{1,0}};
//
//        bp.train(data, target);
//
//        //根据训练结果来检验样本数据
//        for(int j=0;j<data.length;j++){
//            double[] result = bp.computeOut(data[j]);
//            System.out.println(Arrays.toString(data[j])+":"+Arrays.toString(result));
//        }
//
//        //根据训练结果来预测一条新数据的分类
//        double[] x = new double[]{3,1};
//        double[] result = bp.computeOut(x);
//        System.out.println(Arrays.toString(x)+":"+Arrays.toString(result));
    }

//        for (int i = 0; i < bp.layerErr.length; ++i) {
//            for (int j = 0; j < bp.layerErr[i].length; ++j) {
//                System.out.println("layerErr: " + bp.layerErr[i][j]);
//            }
//        }
//
//        for (int i = 0; i < bp.layer_weight.length; ++i) {
//            for (int j = 0; j < bp.layer_weight[i].length; ++j) {
//                for (int k = 0; k < bp.layer_weight[i][j].length; ++k) {
//                    System.out.println("layer_weight: " + bp.layer_weight[i][j][k]);
//                }
//            }
//        }
//
//        for (int i = 0; i < bp.layer_weight_delta.length; ++i) {
//            for (int j = 0; j < bp.layer_weight_delta[i].length; ++j) {
//                for (int k = 0; k < bp.layer_weight_delta[i][j].length; ++k) {
//                    System.out.println("layer_weight_delta: " + bp.layer_weight_delta[i][j][k]);
//                }
//            }
//        }

}
